export default {
  flat: {
    label: "Flat",
    def: "If flat, there is no curvature, Ω<sub>k</sub> = 0, and the dark energy content of the universe is computed as Ω<sub>de</sub> = 1 − Ω<sub>m</sub> − Ω<sub>γ</sub> − Ω<sub>ν</sub> where Ω<sub>m</sub> is the density of matter (dark matter and baryons) in units of the critical density, Ω<sub>γ</sub> is the density of photons, and Ω<sub>ν</sub> the density of neutrinos.",
    type: "bool",
    dependencies: { Ode0: [false] },
  },
  H0: {
    label: "H<sub>0</sub>",
    def: "The Hubble constant in km/s/Mpc.",
    type: "float",
    min: 0,
    step: 1,
  },
  Om0: {
    label: "Ω<sub>m</sub>",
    def: "Ω<sub>m</sub>, the matter density in units of the critical density at z = 0 (includes all non-relativistic matter, i.e., dark matter and baryons but not neutrinos).",
    type: "float",
    min: 0,
    max: 0.9999,
    step: 0.1,
  },
  Ob0: {
    label: "Ω<sub>b</sub>",
    def: "Ω<sub>b</sub>, the baryon density in units of the critical density at z = 0.",
    type: "float",
    min: 0,
    max: 1,
    step: 0.1,
  },
  Ode0: {
    label: "Ω<sub>de</sub>",
    def: "Ω<sub>de</sub>, the dark energy density in units of the critical density at z = 0.",
    type: "float",
    min: 0,
    max: 1,
    step: 0.1,
  },
  sigma8: {
    label: "σ<sub>8</sub>",
    def: "The normalization of the power spectrum, i.e. the variance when the field is filtered with a top hat filter of radius 8 Mpc/h.",
    type: "float",
    min: 0,
    step: 0.1,
    advanced: true,
  },
  ns: {
    label: "n<sub>s</sub>",
    def: "The tilt of the primordial power spectrum.",
    type: "float",
    min: 0,
    step: 0.1,
    advanced: true,
  },
  relspecies: {
    label: "Relativistic species",
    def: "If relspecies == False, all relativistic contributions to the energy density of the universe (such as photons and neutrinos) are ignored.",
    type: "bool",
    advanced: true,
    dependencies: {
      Tcmb0: [true],
      Neff: [true],
    },
  },
  Tcmb0: {
    label: "T<sub>CMB</sub> (K)",
    def: "The temperature of the CMB at z = 0 in Kelvin.",
    type: "float",
    advanced: true,
    default: 2.7255,
  },
  Neff: {
    label: "N<sub>eff</sub>",
    def: "The effective number of neutrino species.",
    type: "float",
    advanced: true,
    default: 3.046,
  },
  de_model: {
    label: "Dark energy model",
    def: "An identifier indicating which dark energy equation of state is to be used. The DE equation of state can either be a cosmological constant (de_model = lambda), a constant w (de_model = w0, the w0 parameter must be set), a linear function of the scale factor according to the parameterization of Linder 2003 where (de_model = w0wa, the w0 and wa parameters must be set), or a function supplied by the user (de_model = user). In the latter case, the w(z) function must be passed using the wz_function parameter.",
    type: "radio",
    advanced: true,
    options: [
      {
        label: "Cosmological constant (Λ)",
        value: "lambda",
      },
      {
        label: "Constant EOS (w<sub>0</sub>)",
        value: "w0",
      },
      {
        label: "Varying EOS (w<sub>0</sub>-w<sub>a</sub>)",
        value: "w0wa",
      },
    ],
    dependencies: { w0: ["w0", "w0wa"], wa: ["w0wa"] },
  },
  w0: {
    label: "w<sub>0</sub>",
    def: "If de_model == w0, this variable gives the constant dark energy equation of state parameter w. If de_model == w0wa, this variable gives the constant component w (see de_model parameter).",
    type: "float",
    advanced: true,
    default: -1.0,
  },
  wa: {
    label: "w<sub>a</sub>",
    def: "If de_model == w0wa, this variable gives the varying component of w, otherwise it is ignored (see de_model parameter).a",
    type: "float",
    advanced: true,
    default: 0.0,
  },
  power_law: {
    label: "Power law",
    def: "Create a self-similar cosmology with a power-law matter power spectrum.",
    type: "bool",
    dependencies: { power_law_n: [true] },
    advanced: true,
    default: false,
  },
  power_law_n: {
    label: "Power law n",
    def: "See power_law.",
    type: "float",
    advanced: true,
    default: -0.0001,
    max: -0.0001,
  },
};
